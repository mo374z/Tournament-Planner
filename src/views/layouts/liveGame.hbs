<div class="container text-center">
    <h1>Live Game</h1>
    <div class="bg-light p-4 rounded" style="margin: 20px auto; width: 80%;">
        <div class="d-flex justify-content-between align-items-center">
            <div class="text-center">
                <h3 id="team1Name">{{ game.opponents.[0] }}</h3>
                <h1 id="team1Score" style="font-weight: bold;">{{ game.goals.[0] }}</h1>
            </div>
            <div>
                <h2><span id="liveCountdownTimer" style="font-weight: bold;"> 00:00</span></h2>
            </div>
            <div class="text-center">
                <h3 id="team2Name">{{ game.opponents.[1] }}</h3>
                <h1 id="team2Score" style="font-weight: bold;">{{ game.goals.[1] }}</h1>
            </div>
        </div>

        {{#if noActiveGame}}
        <p class="mt-3" id="noActiveGameMessage">No active game</p>
        {{/if}}

        <span id="timerStatus" class="ml-2"></span>
    </div>
    <div class="text-center">
        <p><strong>Game Time:</strong> {{ formatTime game.time }}</p>
        <p><strong>Status:</strong> {{ game.status }}</p>
    </div>
</div>

<script src="https://cdn.socket.io/4.3.1/socket.io.min.js"></script>
<script>
    const socket = io('http://localhost:4000');
    socket.on('timerUpdate', (timerValue, isPaused, timerStatus) => {
        const minutes = Math.floor(timerValue / 60);
        const seconds = timerValue % 60;
        const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        document.getElementById('liveCountdownTimer').innerText = formattedTime;
        document.getElementById('timerStatus').innerText = `Status: ${timerStatus}`;
    });

    socket.on('updateLiveGame', (updatedGame) => {
        updatePage(updatedGame);
    });

    function updatePage(game) {
        updateScore('team1Score', game.goals[0]);
        updateScore('team2Score', game.goals[1]);
        updateName('team1Name', game.opponents[0]);
        updateName('team2Name', game.opponents[1]);
        SetActiveGameMessage(game.status);
    }

    function SetActiveGameMessage(status) {        
        if (status === 'active') {
            NoActiveGameMessage = document.getElementById('noActiveGameMessage');
            NoActiveGameMessage.style.display = 'none';
        } else {
            NoActiveGameMessage = document.getElementById('noActiveGameMessage');
            NoActiveGameMessage.style.display = 'block';
        }        
    }

    function updateScore(elementId, score) {
        const scoreElement = document.getElementById(elementId);
        if (scoreElement) {
            scoreElement.innerText = score;
        }
    }

    async function updateName(elementId, teamID) {
        // get name based on id
        const response = await fetch(`/team/getTeamName/${teamID}`, { method: 'GET'})
        
        if (response.ok) {
            // get the team name which is returned as a string
            const teamName = await response.text();
            const nameElement = document.getElementById(elementId);
            if (nameElement) {
                nameElement.innerText = teamName;
            }
        } else {
            console.error('Failed to get team name');
        }
    }

    socket.emit('getData'); //Call for game data when page loads
</script>