<!-- liveGame.handlebars -->
<div style="text-align: center;">
    <h1>Live Game</h1>
    <div style="margin: 20px auto; width: 40%;">
        <div style="background-color: #f2f2f2; padding: 15px; border-radius: 5px;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="text-align: center;">
                    <h2 id="team1Name">{{ liveGame.opponents.[0] }}</h2>
                    <h2 id="team1Score">{{ liveGame.goals.[0] }}</h2>
                </div>
                <div>
                    <h2><span id="liveCountdownTimer" style="font-weight: bold;"> 00:00</span></h2>
                </div>
                <div style="text-align: center;">
                    <h2 id="team2Name">{{ liveGame.opponents.[1] }}</h2>
                    <h2 id="team2Score">{{ liveGame.goals.[1] }}</h2>
                </div>
            </div>
            {{!-- <div style="font-size: 24px;">
                <span id="liveCountdownTimer" style="font-weight: bold;"> 00:00</span>
            </div> --}}

            {{#if noActiveGame}}
            <p>No active game</p>
            {{/if}}

            <span id="timerStatus" style="margin-left: 10px;"></span>
        </div>
        <div style="text-align: center;">
            <p><strong>Game Time:</strong> {{ formatTime liveGame.time }}</p>
            <p><strong>Status:</strong> {{ liveGame.status }}</p>
        </div>
    </div>
</div>

<script src="https://cdn.socket.io/4.3.1/socket.io.min.js"></script>

<script>
    const socket = io('http://localhost:4000');

    socket.on('timerUpdate', (timerValue, isPaused) => {
        const minutes = Math.floor(timerValue / 60);
        const seconds = timerValue % 60;
        const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        document.getElementById('liveCountdownTimer').innerText = formattedTime;

        // Update the timer status display
        const timerStatus = isPaused ? 'Paused' : (timerValue === 0 ? 'Ended' : 'Running');
        document.getElementById('timerStatus').innerText = `Status: ${timerStatus}`;
    });


    socket.on('updateLiveGame', (updatedGame) => {
        // Update the displayed scores on the live game page
        const team1Score = document.getElementById('team1Score');
        const team2Score = document.getElementById('team2Score');

        if (team1Score && team2Score && updatedGame && updatedGame.goals) {
            team1Score.innerText = updatedGame.goals[0];
            team2Score.innerText = updatedGame.goals[1];
        }

        // Update the displayed names on the live game page
        const team1Name = document.getElementById('team1Name');
        const team2Name = document.getElementById('team2Name');

        if (team1Name && team2Name && updatedGame && updatedGame.opponents) {
            team1Name.innerText = updatedGame.opponents[0];
            team2Name.innerText = updatedGame.opponents[1];
        }


        // You can handle other updates or UI changes based on the updated game data here
    });



    function getGameData() {
        socket.emit('getData');
        console.log('getData emitted');
    }

    getGameData(); //Call for game data when page loads


    // Additional socket logic and event listeners can be added if needed
</script>