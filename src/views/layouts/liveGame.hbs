<div style="text-align: center;">
    <h1>Live Game</h1>
    <div style="margin: 20px auto; width: 40%;">
        <div style="background-color: #f2f2f2; padding: 15px; border-radius: 5px;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="text-align: center;">
                    <h2 id="team1Name">{{ game.opponents.[0] }}</h2>
                    <h2 id="team1Score">{{ game.goals.[0] }}</h2>
                </div>
                <div>
                    <h2><span id="liveCountdownTimer" style="font-weight: bold;"> 00:00</span></h2>
                </div>
                <div style="text-align: center;">
                    <h2 id="team2Name">{{ game.opponents.[1] }}</h2>
                    <h2 id="team2Score">{{ game.goals.[1] }}</h2>
                </div>
            </div>

            {{#if noActiveGame}}
            <p>No active game</p>
            {{/if}}

            <span id="timerStatus" style="margin-left: 10px;"></span>
        </div>
        <div style="text-align: center;">
            <p><strong>Game Time:</strong> {{ formatTime game.time }}</p>
            <p><strong>Status:</strong> {{ game.status }}</p>
        </div>
    </div>
</div>

<script src="https://cdn.socket.io/4.3.1/socket.io.min.js"></script>

<script>
    const socket = io('http://localhost:4000');

    socket.on('timerUpdate', (timerValue, isPaused) => {
        const minutes = Math.floor(timerValue / 60);
        const seconds = timerValue % 60;
        const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        document.getElementById('liveCountdownTimer').innerText = formattedTime;

        // Update the timer status display
        const timerStatus = isPaused ? 'Paused' : (timerValue === 0 ? 'Ended' : 'Running');
        document.getElementById('timerStatus').innerText = `Status: ${timerStatus}`;
    });

    socket.on('updateLiveGame', (updatedGame) => {
        console.log('called');
        updatePage(updatedGame);
    });

    function updatePage(game) {
        updateScore('team1Score', game.goals[0]);
        updateScore('team2Score', game.goals[1]);
        updateName('team1Name', game.opponents[0]);
        updateName('team2Name', game.opponents[1]);
    }

    function updateScore(elementId, score) {
        const scoreElement = document.getElementById(elementId);
        if (scoreElement) {
            scoreElement.innerText = score;
        }
    }

    async function updateName(elementId, teamID) {
        // get name based on id
        const response = await fetch(`/team/getTeamName/${teamID}`, { method: 'GET'})
        
        if (response.ok) {
            // get the team name which is returned as a string
            const teamName = await response.text();
            const nameElement = document.getElementById(elementId);
            if (nameElement) {
                nameElement.innerText = teamName;
            }
        } else {
            console.error('Failed to get team name');
        }
    }

    socket.emit('getData'); //Call for game data when page loads
</script>