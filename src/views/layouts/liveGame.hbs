<div class="container text-center">
    <div class="page-divider border border-dark top-row border-2">
        <div class="d-flex justify-content-between align-items-center">

            <div class="text-center" style="width: 30%;">
                <h3 id="team1Name" style="font-size: 35pt;">{{ game.opponents.[0] }}</h3>
                <h1 id="team1Score" style="font-weight: bold; font-size: 90pt;">{{ game.goals.[0] }}</h1>
            </div>
            <div>
                <h2><span id="liveCountdownTimer" style="font-weight: bold; font-size: 90pt;"> 00:00</span></h2>
            </div>
            <div class="text-center" style="width: 30%;">
                <h3 id="team2Name" style="font-size: 35pt;">{{ game.opponents.[1] }}</h3>
                <h1 id="team2Score" style="font-weight: bold; font-size: 90pt;">{{ game.goals.[1] }}</h1>
            </div>

        </div>

        {{#if noActiveGame}}
        <p class="mt-3" id="noActiveGameMessage">Aktuell kein Spiel aktiv !</p>
        {{else}}
        <p class="mt-3 d-none" id="noActiveGameMessage">No active game</p>
        {{/if}}

        <div class="alert alert-info d-none mt-2 sekt-alert" role="alert">
            This is a info alert to show Sekt for a Team.
        </div>

        {{!-- Timer Status (ausgeblendet): --}}
        <span id="timerStatus" class="ml-2 d-none"></span> 
    </div>

    <!-- Carousel Section -->
    <div id="carouselSlidesOnly" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner d-flex align-items-center page-divider" style="height: 400px; overflow: hidden;" id="carouselImages">
            {{#each carouselImages}}
                <div class="carousel-item {{#if @first}}active{{/if}}" data-bs-interval="5000">
                    <img class="d-block w-100 h-100 object-fit-contain carousel-image" src="/images/carousel/{{this}}" alt="{{this}}">
                </div>
            {{/each}}
        </div>
        <!-- Navigation buttons -->
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselSlidesOnly" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselSlidesOnly" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>

    <div id="connectionIndicator" class="text-center mt-3">
        <span id="connectionStatusText" class="text-danger">Verbinde...</span>
    </div>

    {{!-- <div class="text-center">
        <p><strong>Game Time:</strong> {{ formatTime game.time }}</p>
        <p><strong>Status:</strong> {{ game.status }}</p>
    </div> --}}
</div>

    <style>
        .carousel-image {
            object-fit: contain;
            width: 100%;
            height: 98%;
        }

        .carousel-item {
            width: 100%;
            height: 100%;
            object-fit: contain
        }

        .sekt-alert {
            font-size: 24pt;
            font-weight: bold;
            border-width: 4px;
            animation: fadeInOut 20s ease-in-out, borderBlink 1s infinite;
        }

        @keyframes fadeInOut {
            0%, 100% { opacity: 0; }
            5%, 95% { opacity: 1; }
        }

        @keyframes borderBlink {
            0% { border-color: red; }
            25% { border-color: yellow; }
            50% { border-color: green; }
            75% { border-color: blue; }
            100% { border-color: red; }
        }
    </style>

<script src="https://cdn.socket.io/4.3.1/socket.io.min.js"></script>
<script>
    const socket = io('{{socketConfig.protocol}}://{{socketConfig.host}}:{{socketConfig.socketPort}}');

    socket.on('connect', () => {
        console.log('Socket connected');
        document.getElementById('connectionStatusText').classList.remove('text-danger');
        document.getElementById('connectionStatusText').classList.add('text-success');
        document.getElementById('connectionStatusText').textContent = 'Verbunden';
    });

    socket.on('disconnect', () => {
        console.log('Socket disconnected');
        document.getElementById('connectionStatusText').classList.remove('text-success');
        document.getElementById('connectionStatusText').classList.add('text-danger');
        document.getElementById('connectionStatusText').textContent = 'Getrennt';
    });

    socket.on('timerUpdate', (timerValue, isPaused, timerStatus, lastMin) => {
        const minutes = Math.floor(timerValue / 60);
        const seconds = timerValue % 60;
        const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        const liveCountdownTimer = document.getElementById('liveCountdownTimer');
        liveCountdownTimer.innerText = formattedTime;
        document.getElementById('timerStatus').innerText = `Status: ${timerStatus}`;
        if (lastMin) {
            liveCountdownTimer.classList.add('text-danger');
        } else {
            liveCountdownTimer.classList.remove('text-danger');
        }
    });

    socket.on('updateLiveGame', (updatedGame) => {
        updatePage(updatedGame);
        console.log('Game updated');
    });

    const audio = new Audio('/sounds/Horn.mp3');       // Create an audio element

    socket.on('playSound', (updatedGame) => {          
        audio.play();
        const pageDivider = document.querySelector('.top-row');
        console.log('playSound');   
        pageDivider.classList.add('border-success');
        pageDivider.classList.remove('border-dark');
        setTimeout(() => {
            pageDivider.classList.remove('border-success');
            pageDivider.classList.add('border-dark');
        }, 2000); // Rahmen f√ºr 2 Sekunden gr√ºn aufleuchten lassen
    });

    let gameOppNames = ['{{ game.opponents.[0] }}', '{{ game.opponents.[1] }}'];

    async function updatePage(game) {
        updateScore('team1Score', game.goals[0]);
        updateScore('team2Score', game.goals[1]);  
        const teamName1 = await updateName('team1Name', game.opponents[0]);
        const teamName2 = await updateName('team2Name', game.opponents[1]); 

        gameOppNames = [teamName1, teamName2];
        console.log('gameOppNames: ' + gameOppNames);

        SetActiveGameMessage(game.status);
    }

    function SetActiveGameMessage(status) {        
        if (status === 'active') {
            NoActiveGameMessage = document.getElementById('noActiveGameMessage');
            NoActiveGameMessage.style.display = 'none';
        } else {
            NoActiveGameMessage = document.getElementById('noActiveGameMessage');
            NoActiveGameMessage.style.display = 'block';
        }        
    }

    function updateScore(elementId, score) {
        const scoreElement = document.getElementById(elementId);
        if (scoreElement) {
            scoreElement.innerText = score;
        }
    }

    async function updateName(elementId, teamID) {
        // get name based on id
        const response = await fetch(`/team/getTeamName/${teamID}`, { method: 'GET'})

        if (response.ok) {
            // get the team name which is returned as a string
            const teamName = await response.text();
            const nameElement = document.getElementById(elementId);
            if (nameElement) {
                nameElement.innerText = teamName;
            }
            return teamName;
        } else {
            console.error('Failed to get team name');
            return "Error fetching team name";
        }
    }

    socket.on('Sekt', (team) => {
        console.log('Sekt for Team: ' + team.name);
        const alert = document.querySelector('.sekt-alert');
        alert.innerHTML = '<h3 class="alert-heading" style="font-weight: bold;">üçæ Sekt f√ºr ' + team.name + ' ! üçæ</h3>';
        alert.classList.remove('d-none');
        setTimeout(() => {
            alert.classList.add('d-none');
        }, 20000);
    });

    socket.emit('getData'); //Call for game data when page loads
</script>