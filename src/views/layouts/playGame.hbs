<script src="https://cdn.socket.io/4.3.1/socket.io.min.js"></script>
<div class="container text-center">
    <h1>Spiel Verwaltung <span id="connectionStatusDot" style="display: inline-block; width: 25px; height: 25px; border-radius: 50%; background-color: green;"></span></h1>
    <hr>

    <div class="row mb-3">
        <div class="col text-center">
            <h2 class="text-decoration-underline">Spiel Nr. {{ game.number }}</h2>
            <div class="mb-2 text-start text-justify d-inline-block">
                <p><strong>Start Uhrzeit:</strong> {{formatTime game.time }}</p>
                <p><strong>Endzeit:</strong> <span id="gameEndTime"></span></p>
                <p><strong>Aktuelle Uhrzeit</strong> <span id="currentTime"></span></p>
                <p><strong>Spieldauer:</strong> {{ game.duration }}:00 min</p>
                <p><strong>Name:</strong> {{ game.gameDisplayName }}</p>
                <p><strong>Status:</strong> {{ game.status }}</p>
                <button id="updateLivePageButton" onclick="SetGameToActive()" class="btn btn-danger">Spiel aktiv setzen</button>
                <div class="alert alert-success d-none mt-2" role="alert"> Game is now active and on Live Page.</div>
            </div>
        </div>
        <div class="col" id="timerContainer">
            <h2 class="text-decoration-underline">Timer</h2>
            <div id="activeGameControls">
                <div>
                    <span id="countdownTimer" class="display-4">{{ game.duration }}:00 min</span>
                </div>
                <div class="mt-2">
                    <button id="startButton" class="btn btn-primary me-2">Play/Pause</button>
                    <button id="resetButton" class="btn btn-secondary" onclick="return confirm('Are you sure you want to reset the timer?')">Reset Timer</button>
                    <br>
                    <span id="timerStatus" class="ms-2"></span>
                </div>
                <div class="mt-3">
                    <input type="number" id="playbackTime" name="playbackTime" min="-10" max="10" value="1" style="width: 50px;">
                    <label for="playbackTime">min</label><br>
                    <button onclick="addPlaybackTime()" class="btn btn-dark btn-sm">Nachspielzeit hinzuf체gen</button>
                </div>
            </div>
            <div id="inactiveGameWarning" class="alert alert-warning mt-2" role="alert">
                This game is not active. <br>Please set the game to active.
            </div>
            <div id="otherGameActiveWarning" class="alert alert-danger mt-2" role="alert">
                There is another game active.<br> Please end the active Game with the "End Game Button".
            </div>
        </div>
    </div>
    <div id="connectionStatus" class="alert alert-warning d-none" role="alert">
        Verbindung zum Server verloren.
    </div>
    <hr>

    <div class="row mb-3">
        <div class="col">
            <h2 class="text-decoration-underline">Teams</h2>
            <div class="row">
                <div class="col">
                    <h3>{{ game.opponents.[0] }}</h3>
                    <p class="display-5"><strong><span id="team1Score">{{ game.goals.[0] }}</span></strong></p>
                    <div id="team1Controls">
                        <button onclick="changeScore(1,1)" class="btn btn-success me-2">+</button>
                        <button onclick="changeScore(1,-1)" class="btn btn-danger">-</button>
                    </div>
                </div>
                <div class="col">
                    <h3>{{ game.opponents.[1] }}</h3>
                    <p class="display-5"><strong><span id="team2Score">{{ game.goals.[1] }}</span></strong></p>
                    <div id="team2Controls">
                        <button onclick="changeScore(2,1)" class="btn btn-success me-2">+</button>
                        <button onclick="changeScore(2,-1)" class="btn btn-danger">-</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col text-center">
            <h2 class="text-decoration-underline">Z채hler</h2>
            <div class="text-start text-justify d-inline-block">
                <p class="mb-2"><strong>Tore im Tunier:</strong> <span id="allGoalsCounter">{{ generalCounters.allGoals }}</span></p>
                <p class="mb-2"><strong>Gespielte Spiele:</strong> <span id="gamesPlayedCounter">{{ generalCounters.gamesPlayed }}</span></p>
                <p class="mb-2"><strong>Bisher gewonnene Sekt:</strong> <span id="wonSektBottlesCounter">{{ generalCounters.wonSektBottles }}</span></p>
                <p class="mb-2"><strong>Tore bis zu Sekt:</strong> <span id="goalSektCounter">{{ generalCounters.goalSektCounter }}</span></p>
                

                <div class="alert alert-info d-none mt-2" role="alert">
                    This is a info alert to show Sekt for a Team.
                </div>
            </div>
        </div>
    </div>

    <hr>

    <a href="/schedule/list" class="btn btn-secondary me-2 mt-3">Zur체ck zum Spielplan</a>

    <a href="/game/{{ game._id }}/endGame" id="endGameButton" class="btn btn-danger mt-3" onclick="return confirm('Willst du wirklich das Spiel ({{ game.opponents.[0] }} vs {{ game.opponents.[1] }}) beenden ?');">Spiel beenden</a>
    <hr>
    <table class="table">
        <thead>
            <tr>
                <td></td>
                <th>Startzeit</th>
                <th>Gegner</th>
                <th>Spieldauer</th>
                <th>Spielname</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th>N채chstes Spiel: </th>
                <td id="nextGameTime"></td>
                <td id="nextGameOpponents" style="font-weight: bold;"></td>
                <td id="nextGameDuration"></td>
                <td id="nextGameDisplayName"></td>
            </tr>
        </tbody>
    </table>

    <div class="container mt-5">
        <h3 class="text-decoration-underline">Info-Banner</h3>
        <div class="input-group mb-3">
            <input type="text" id="infoBannerMessage" class="form-control" placeholder="Aktuell keine Nachricht !" autocomplete="off" style="border-width: 2px">
            <button class="btn btn-primary" id="infoBannerButton" onclick="updateInfoBanner()">Infobanner updaten</button>
        </div>
    </div>

    <div id="connectionIndicator" class="text-center">
        <span id="connectionStatusText" class="text-success">Verbinde...</span>
    </div>
</div>

<script>
    console.log('Game status: {{ areOtherGamesActiveBool }}');

    // add playback time to the timer
    function addPlaybackTime() {
        socket.emit('addPlaybackTime', document.getElementById('playbackTime').value);
    }

    // update the date and time
    function updateDateTime() {
        const now = new Date();
        const currentDateTime = now.toLocaleTimeString();
        document.querySelector('#currentTime').textContent = currentDateTime;
    }

    // call the `updateDateTime` function every second
    setInterval(updateDateTime, 1000);

    //{{ game.duration }} is in minutes
    const durationInSeconds = {{ game.duration }} * 60; // Convert minutes to seconds

    function calculateEndTime(startTime, duration) {
        const startTimestamp = new Date(startTime).getTime();
        const durationInMillis = duration * 60 * 1000; // Convert minutes to milliseconds for calculation
        const endTimestamp = startTimestamp + durationInMillis;
        const endTime = new Date(endTimestamp);

        const hours = endTime.getHours().toString().padStart(2, '0');
        const minutes = endTime.getMinutes().toString().padStart(2, '0');

        return `${hours}:${minutes}`;
    }

    // Function to update the game end time
    function updateGameEndTime(startTime, duration) {
        const endTime = calculateEndTime(startTime, duration);
        document.querySelector('#gameEndTime').textContent = endTime;
    }

    // Update the game end time on page load
    updateGameEndTime('{{ game.time }}', '{{ game.duration }}');
    updateDateTime();

    // change the score of a team
    async function changeScore(teamNum, i){
        try {
            const gameId = '{{ game._id }}';
            const response = await fetch(`/game/${gameId}/change-score/${teamNum}/${i}`, {
                method: 'POST',
            });

            if (response.ok) {
                const { updatedGame, updatedCounters } = await response.json(); // Fetch updated game and counters
                // Update the displayed score on the page
                document.querySelector(`#team${teamNum}Score`).textContent = updatedGame.goals[teamNum-1];
                updateCounters(updatedCounters); // Update the displayed counters on the page
            } else if (response.status === 304) {
                console.log('Score not modified due to constraints.');
            }
        } catch (err) {
            console.error('Error changing score: ', err);
        }
    }

    // Function to update and display the counters
    function updateCounters(counters) {
        const allGoalsCounter = document.querySelector('#allGoalsCounter');
        const gamesPlayedCounter = document.querySelector('#gamesPlayedCounter');
        const goalSektCounter = document.querySelector('#goalSektCounter');

        if (allGoalsCounter && gamesPlayedCounter && goalSektCounter) {
            allGoalsCounter.textContent = counters.allGoals !== 0 ? counters.allGoals : 0;
            gamesPlayedCounter.textContent = counters.gamesPlayed !== 0 ? counters.gamesPlayed : 0;
            goalSektCounter.textContent = counters.goalSektCounter !== 0 ? counters.goalSektCounter : 0;
        }
    }

    async function SetGameToActive() {      //Set game to active and update the live page
        try {
            const gameId = '{{ game._id }}';

            await fetch(`/game/start/${gameId}`, {
                method: 'POST',
            });

            const response = await fetch(`/game/${gameId}/updateLivePage`, {
                method: 'POST',
            });

            const updateButton = document.getElementById('updateLivePageButton');
            updateButton.disabled = true;

            location.reload();
        } catch (err) {
            console.error('Error updating data on Live page: ', err);
        }
    }

    function disableActiveGameButton(status) {
        const updateButton = document.getElementById('updateLivePageButton');
        updateButton.disabled = status === 'active';
    }
    disableActiveGameButton('{{ game.status }}');

    const socket = io('{{socketConfig.protocol}}://{{socketConfig.host}}:{{socketConfig.socketPort}}');

    socket.on('connect', () => {
        console.log('Socket connected');
        document.getElementById('connectionStatusDot').style.backgroundColor = 'green';
        document.getElementById('connectionStatus').classList.add('d-none');
        document.getElementById('connectionStatusText').classList.remove('text-danger');
        document.getElementById('connectionStatusText').classList.add('text-success');
        document.getElementById('connectionStatusText').textContent = 'Verbunden mit Server !';
        if ('{{ game.status }}' === 'active') {
            socket.emit('getNextGame');
        }
    });

    socket.on('disconnect', () => {
        console.log('Socket disconnected');
        document.getElementById('connectionStatusDot').style.backgroundColor = 'red';
        document.getElementById('connectionStatus').classList.remove('d-none');
        document.getElementById('connectionStatusText').classList.remove('text-success');
        document.getElementById('connectionStatusText').classList.add('text-danger');
        document.getElementById('connectionStatusText').textContent = 'Getrennt';
    });

    socket.emit('getData'); //Call for game data when page loads

    socket.on('timerUpdate', (timerValue, isPaused, timerStatus, lastMin) => {
        const minutes = Math.floor(timerValue / 60);
        const seconds = timerValue % 60;
        const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        const countdownTimer = document.getElementById('countdownTimer');
        countdownTimer.innerText = formattedTime;
        document.getElementById('timerStatus').innerText = `Status: ${timerStatus}`;
        if (lastMin) {
            countdownTimer.classList.add('text-danger');
        } else {
            countdownTimer.classList.remove('text-danger');
        }
    });

    document.getElementById('resetButton').addEventListener('click', () => {
        socket.emit('resetGame', durationInSeconds);
    });

    document.getElementById('startButton').addEventListener('click', async () => {
        socket.emit('playPauseGame');
    });

    const gameOppNames = ['{{ game.opponents.[0] }}', '{{ game.opponents.[1] }}'];

    socket.on('Sekt', (team) => {
        console.log('Sekt for Team: ' + team.name);
        const alert = document.querySelector('.alert-info');
        alert.innerHTML = '<h5 class="alert-heading">Sekt f체r ' + team.name + ' !</h5><p class="mb-0">(' + team.sektWon + '. Sekt des Teams)</p>';
        alert.classList.remove('d-none');
        setTimeout(() => {
            alert.classList.add('d-none');
        }, 60000);
    });

    socket.on('nextGameData', (nextGame) => {
        document.getElementById('nextGameTime').textContent = nextGame.time + ' Uhr';
        document.getElementById('nextGameOpponents').textContent = nextGame.opponents.join(' vs ');
        document.getElementById('nextGameDuration').textContent = nextGame.duration + ' min';
        document.getElementById('nextGameDisplayName').textContent = nextGame.gameDisplayName;
    });

    let infoBannerMessage = '{{ infoBannerMessage }}';

    socket.on('updateInfoBanner', (message) => {
        document.getElementById('infoBannerMessage').value = message;
        infoBannerMessage = message;
        //flash the textfield with a green border to indicate that the message has been updated
        document.getElementById('infoBannerMessage').style.borderColor = 'green';
        document.getElementById('infoBannerMessage').value = '';
        if(infoBannerMessage === '' || infoBannerMessage === null) {
            document.getElementById('infoBannerMessage').placeholder = 'Aktuell keine Nachricht !';
            document.getElementById('infoBannerButton').textContent = 'Infobanner updaten';
            document.getElementById('infoBannerButton').classList.remove('btn-danger');
        } else {
            document.getElementById('infoBannerMessage').placeholder = 'Aktuell: ' + message;
            document.getElementById('infoBannerButton').textContent = 'Infobanner zur체cksetzen';
            document.getElementById('infoBannerButton').classList.add('btn-danger');
        }
        

        setTimeout(() => {
            document.getElementById('infoBannerMessage').style.borderColor = '';
        }, 1000);
    });

    document.getElementById('infoBannerMessage').addEventListener('input', () => {
        const message = document.getElementById('infoBannerMessage').value;

        if((message === '' || message === null) && infoBannerMessage !== '') {
            document.getElementById('infoBannerButton').textContent = 'Infobanner zur체cksetzen';
            document.getElementById('infoBannerButton').classList.add('btn-danger');
        } else {           
            document.getElementById('infoBannerButton').textContent = 'Infobanner updaten';
            document.getElementById('infoBannerButton').classList.remove('btn-danger');
        }
    });

    function updateInfoBanner() {
        const message = document.getElementById('infoBannerMessage').value;
        socket.emit('updateInfoBanner', message);
    }

    // JavaScript to handle visibility of elements based on game status
    document.addEventListener('DOMContentLoaded', () => {
        const gameStatus = '{{ game.status }}';
        const areOtherGamesActive = '{{ areOtherGamesActiveBool }}' === 'true';

        const activeGameControls = document.getElementById('activeGameControls');
        const inactiveGameWarning = document.getElementById('inactiveGameWarning');
        const otherGameActiveWarning = document.getElementById('otherGameActiveWarning');
        const endGameButton = document.getElementById('endGameButton');
        const team1Controls = document.getElementById('team1Controls');
        const team2Controls = document.getElementById('team2Controls');

        if (gameStatus === 'active') {
            activeGameControls.style.display = 'block';
            endGameButton.classList.remove('d-none');
            team1Controls.style.display = 'block';
            team2Controls.style.display = 'block';
            inactiveGameWarning.style.display = 'none';
            otherGameActiveWarning.style.display = 'none';
        } else {
            activeGameControls.style.display = 'none';
            endGameButton.classList.add('d-none');
            team1Controls.style.display = 'none';
            team2Controls.style.display = 'none';
            if (areOtherGamesActive) {
                otherGameActiveWarning.style.display = 'block';
                inactiveGameWarning.style.display = 'none';
            } else {
                otherGameActiveWarning.style.display = 'none';
                inactiveGameWarning.style.display = 'block';
            }
        }

        if (infoBannerMessage) {
            document.getElementById('infoBannerMessage').placeholder = 'Aktuelle Nachricht: ' + message;
            document.getElementById('infoBannerButton').textContent = 'Infobanner zur체cksetzen';
            document.getElementById('infoBannerButton').classList.add('btn-danger');
        }
    });
</script>