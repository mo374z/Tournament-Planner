<script src="https://cdn.socket.io/4.3.1/socket.io.min.js"></script>
<div style="text-align: center;">
    <h1>Game Play Page </h1>
    <hr>
    <h2> Game Nr. {{ game.number }}</h2>

    <div style="margin-bottom: 10px;">
        <p><strong>Game Start Time:</strong> {{formatTime game.time }}</p>
        <p><strong>Game End Time:</strong> <span id="gameEndTime"></span></p>
        <p><strong>Current Time:</strong> <span id="currentTime"></span></p>
        <p><strong>Game Duration:</strong> {{ game.duration }}:00 min</span></p>

        <button id="updateLivePageButton" onclick="UpdateDataOnLivePage()"
            style="margin-right: 5px; background-color: red;">Setzte Spiel auf Live Page</button>
    </div>
    <hr>

    <div style="margin-bottom: 20px;">
        <h2>Timer</h2>
        <div>
            <span id="countdownTimer" style="font-size: 32px;">{{ game.duration }}:00 min</span>
        </div>
        <div style="margin-top: 10px;">
            <button id="startButton" style="margin-right: 10px;">Play/Pause Game</button>
            <button id="resetButton">Reset Timer</button>
            <br>
            <span id="timerStatus" style="margin-left: 10px;"></span>
        </div>
    </div>
    <hr>

    <div>
        <h2>Teams</h2>
        <table style="margin: 0 auto;">
            <tr>
                <td style="padding: 10px;">
                    <h3>Team 1: {{ game.opponents.[0] }}</h3>
                    <p style="font-size: 24px;"><strong> <span id="team1Score">{{ game.goals.[0] }}</span> </strong></p>
                    <div>
                        <button onclick="changeScore(1,1)" style="margin-right: 5px;">+</button>
                        <button onclick="changeScore(1,-1)">-</button>
                    </div>
                </td>
                <td style="padding: 10px;">
                    <h3>Team 2: {{ game.opponents.[1] }}</h3>
                    <p style="font-size: 24px;"><strong> <span id="team2Score">{{ game.goals.[1] }}</span> </strong></p>
                    <div>
                        <button onclick="changeScore(2,1)" style="margin-right: 5px;">+</button>
                        <button onclick="changeScore(2,-1)">-</button>
                    </div>
                </td>
            </tr>
        </table>
    </div>
    <hr>

    <div style="margin-top: 20px; text-align: center;">
        <h2>Counters</h2>
        <p><strong>All Goals:</strong> <span id="allGoalsCounter">{{ generalCounters.allGoals }}</span></p>
        <p><strong>Games Played:</strong> <span id="gamesPlayedCounter">{{ generalCounters.gamesPlayed }}</span></p>
        <p><strong>Sekt Counter:</strong> <span id="goalSektCounter">{{ generalCounters.goalSektCounter }}</span></p>
    </div>
    <hr>

    <a href="/schedule/list"
        style="margin-top: 20px; display: inline-block; padding: 8px 20px; background-color: #6c757d; color: white; text-decoration: none; border-radius: 4px;">Back
        to List</a>

    <a href="/game/{{ game._id }}/endGame"
        style="margin-top: 20px; display: inline-block; padding: 8px 20px; background-color: #f30808; color: white; text-decoration: none; border-radius: 4px;">END
        GAME</a>
</div>

<script>
    // update the date and time
    function updateDateTime() {
        const now = new Date();
        const currentDateTime = now.toLocaleTimeString();
        document.querySelector('#currentTime').textContent = currentDateTime;
    }

    // call the `updateDateTime` function every second
    setInterval(updateDateTime, 1000);



    function calculateEndTime(startTime, duration) {
        const startTimestamp = new Date(startTime).getTime();
        const durationInMillis = duration * 60 * 1000; // Convert minutes to milliseconds
        const endTimestamp = startTimestamp + durationInMillis;
        const endTime = new Date(endTimestamp);

        const hours = endTime.getHours().toString().padStart(2, '0');
        const minutes = endTime.getMinutes().toString().padStart(2, '0');

        return `${hours}:${minutes}`;
    }


    // Function to update the game end time
    function updateGameEndTime(startTime, duration) {
        const endTime = calculateEndTime(startTime, duration);
        document.querySelector('#gameEndTime').textContent = endTime;
    }

    // Update the game end time on page load
    updateGameEndTime('{{ game.time }}', {{ game.duration }});
    updateDateTime();

    // change the score of a team
    async function changeScore(teamNum, i){
        try {
            const gameId = '{{ game._id }}';
            const response = await fetch(`/game/${gameId}/change-score/${teamNum}/${i}`, {
                method: 'POST',
            });

            if (response.ok) {
                const { updatedGame, updatedCounters } = await response.json(); // Fetch updated game and counters
                // Update the displayed score on the page
                document.querySelector(`#team${teamNum}Score`).textContent = updatedGame.goals[teamNum-1];
                updateCounters(updatedCounters); // Update the displayed counters on the page
            } else if (response.status === 304) {
                console.log('Score not modified due to constraints.');
            }
        } catch (err) {
            console.error('Error changing score: ', err);
        }
    }

    // Function to update and display the counters
    function updateCounters(counters) {
        const allGoalsCounter = document.querySelector('#allGoalsCounter');
        const gamesPlayedCounter = document.querySelector('#gamesPlayedCounter');
        const goalSektCounter = document.querySelector('#goalSektCounter');

        if (allGoalsCounter && gamesPlayedCounter && goalSektCounter) {
            allGoalsCounter.textContent = counters.allGoals !== 0 ? counters.allGoals : 0;
            gamesPlayedCounter.textContent = counters.gamesPlayed !== 0 ? counters.gamesPlayed : 0;
            goalSektCounter.textContent = counters.goalSektCounter !== 0 ? counters.goalSektCounter : 0;
        }
    }


    async function UpdateDataOnLivePage() {
        try {
            const gameId = '{{ game._id }}'; // Replace this with your game ID
            const response = await fetch(`/game/${gameId}/updateLivePage`, {
                method: 'POST',
            });

            if (response.ok) {
                document.getElementById('updateLivePageButton').style.backgroundColor = 'green';
                console.log('Game Data on Live page Updated successfully');
            } else {
                console.error('Failed to Update Game Data on Live page');
            }
        } catch (err) {
            console.error('Error updating data on Live page: ', err);
        }
    }


    const socket = io('http://localhost:4000');

    socket.on('timerUpdate', (timerValue, isPaused) => {
        const minutes = Math.floor(timerValue / 60);
        const seconds = timerValue % 60;
        const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        document.getElementById('countdownTimer').innerText = formattedTime;

        // Update the timer status display
        const timerStatus = isPaused ? 'Paused' : (timerValue === 0 ? 'Ended' : 'Running');
        document.getElementById('timerStatus').innerText = `Status: ${timerStatus}`;
    });

    document.getElementById('resetButton').addEventListener('click', () => {
        const duration = {{ durationInMillis }} / 1000; // Convert milliseconds to seconds
        socket.emit('resetGame', duration);
    });

    document.getElementById('startButton').addEventListener('click', async () => {
        try {
            const duration = {{ durationInMillis }} / 1000; // Convert milliseconds to seconds
            socket.emit('playPauseGame');
            const gameId = '{{ game._id }}';
            const response = await fetch(`/game/start/${gameId}`, {
                method: 'POST',
            });
        } catch (err) {
            console.error('Error starting game: ', err);
        }
    });
</script>