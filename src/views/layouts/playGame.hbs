<script src="https://cdn.socket.io/4.3.1/socket.io.min.js"></script>
  <div class="container text-center">
        <h1>Game Play Page</h1>
        <hr>

        <div class="row mb-3">
            <div class="col">
                <h2>Game Nr. {{ game.number }}</h2>
                <div class="mb-2">
                    <p><strong>Game Start Time:</strong> {{formatTime game.time }}</p>
                    <p><strong>Game End Time:</strong> <span id="gameEndTime"></span></p>
                    <p><strong>Current Time:</strong> <span id="currentTime"></span></p>
                    <p><strong>Game Duration:</strong> {{ game.duration }}:00 min</p>
                    <p><strong>Status:</strong> {{ game.status }}</p>

                    {{#unless areOtherGamesActiveBool}}
                         <button id="updateLivePageButton" onclick="SetGameToActive()" class="btn btn-danger">Set Game to active</button>
                    {{/unless}}
                       
                    
                    <div class="alert alert-success d-none mt-2" role="alert"> Game is now active and on Live Page.</div>
                </div>
            </div>
            <div class="col" id="timerContainer">
                <h2>Timer</h2>
                {{#streq game.status 'active'}}
                <div>
                    <span id="countdownTimer" class="display-4">{{ game.duration }}:00 min</span>
                </div>
                <div class="mt-2">
                    <button id="startButton" class="btn btn-primary me-2">Play/Pause Game</button>
                    <button id="resetButton" class="btn btn-secondary" onclick="return confirm('Are you sure you want to reset the timer?')">Reset Timer</button>
                    <br>
                    <span id="timerStatus" class="ms-2"></span>
                </div>
                <div class="mt-3">
                    
                    <input type="number" id="playbackTime" name="playbackTime" min="-10" max="10" value="1" style="width: 50px;">
                    <label for="playbackTime">min</label><br>
                    <button onclick="addPlaybackTime()" class="btn btn-dark btn-sm">Add Playback Time</button>
                </div>
                {{else}}    
                   {{#if areOtherGamesActiveBool}}
                        <div class="alert alert-danger mt-2" role="alert">
                            There is another game active.<br> Please end the active Game with the "End Game Button".
                        </div>
                    {{else}}
                        <div class="alert alert-warning mt-2" role="alert">
                            This game is not active. <br>Please set the game to active.
                        </div>
                    {{/if}}
                {{/streq}}                
            </div>
        </div>

        <hr>

        <div class="row mb-3">
            <div class="col">
                <h2>Teams</h2>
                <div class="row">
                    <div class="col">
                        <h3>{{ game.opponents.[0] }}</h3>
                        <p class="display-5"><strong><span id="team1Score">{{ game.goals.[0] }}</span></strong></p>
                        {{#streq game.status 'active'}}
                            <div>
                                <button onclick="changeScore(1,1)" class="btn btn-success me-2">+</button>
                                <button onclick="changeScore(1,-1)" class="btn btn-danger">-</button>
                            </div>
                        {{/streq}}
                    </div>
                    <div class="col">
                        <h3>{{ game.opponents.[1] }}</h3>
                        <p class="display-5"><strong><span id="team2Score">{{ game.goals.[1] }}</span></strong></p>
                        {{#streq game.status 'active'}}
                            <div>
                                <button onclick="changeScore(2,1)" class="btn btn-success me-2">+</button>
                                <button onclick="changeScore(2,-1)" class="btn btn-danger">-</button>
                            </div>
                        {{/streq}}
                    </div>
                </div>
            </div>
            <div class="col">
                <h2>Counters</h2>
                <p class="mb-2"><strong>All Goals:</strong> <span id="allGoalsCounter">{{ generalCounters.allGoals }}</span></p>
                <p class="mb-2"><strong>Games Played:</strong> <span id="gamesPlayedCounter">{{ generalCounters.gamesPlayed }}</span></p>
                <p class="mb-2"><strong>Sekt Counter:</strong> <span id="goalSektCounter">{{ generalCounters.goalSektCounter }}</span></p>


                <div class="alert alert-info d-none mt-2" role="alert">
                        This is a info alertâ€”check it out!
                </div>
            </div>
        </div>

        <hr>

        <a href="/schedule/list" class="btn btn-secondary me-2 mt-3">Back to List</a>

        {{#streq game.status 'active'}}
        <a href="/game/{{ game._id }}/endGame" class="btn btn-danger mt-3" onclick="return confirm('Willst du wirklich das Spiel ({{ game.opponents.[0] }} vs {{ game.opponents.[1] }}) beenden ?');">End Game</a>
        {{/streq}}
    </div>

<script>

    console.log('Game status: {{ areOtherGamesActiveBool }}');

    // add playback time to the timer
    function addPlaybackTime() {
        socket.emit('addPlaybackTime', document.getElementById('playbackTime').value);
    }



    // update the date and time
    function updateDateTime() {
        const now = new Date();
        const currentDateTime = now.toLocaleTimeString();
        document.querySelector('#currentTime').textContent = currentDateTime;
    }

    // call the `updateDateTime` function every second
    setInterval(updateDateTime, 1000);


    //{{ game.duration }} is in minutes

    const durationInSeconds = {{ game.duration }} * 60; // Convert minutes to seconds

    function calculateEndTime(startTime, duration) {
        const startTimestamp = new Date(startTime).getTime();
        const durationInMillis = duration * 60 * 1000; // Convert minutes to milliseconds for calculation
        const endTimestamp = startTimestamp + durationInMillis;
        const endTime = new Date(endTimestamp);

        const hours = endTime.getHours().toString().padStart(2, '0');
        const minutes = endTime.getMinutes().toString().padStart(2, '0');

        return `${hours}:${minutes}`;
    }


    // Function to update the game end time
    function updateGameEndTime(startTime, duration) {
        const endTime = calculateEndTime(startTime, duration);
        document.querySelector('#gameEndTime').textContent = endTime;
    }

    // Update the game end time on page load
    updateGameEndTime('{{ game.time }}', '{{ game.duration }}');
    updateDateTime();

    // change the score of a team
    async function changeScore(teamNum, i){
        try {
            const gameId = '{{ game._id }}';
            const response = await fetch(`/game/${gameId}/change-score/${teamNum}/${i}`, {
                method: 'POST',
            });

            if (response.ok) {
                const { updatedGame, updatedCounters } = await response.json(); // Fetch updated game and counters
                // Update the displayed score on the page
                document.querySelector(`#team${teamNum}Score`).textContent = updatedGame.goals[teamNum-1];
                updateCounters(updatedCounters); // Update the displayed counters on the page
            } else if (response.status === 304) {
                console.log('Score not modified due to constraints.');
            }
        } catch (err) {
            console.error('Error changing score: ', err);
        }
    }

    // Function to update and display the counters
    function updateCounters(counters) {
        const allGoalsCounter = document.querySelector('#allGoalsCounter');
        const gamesPlayedCounter = document.querySelector('#gamesPlayedCounter');
        const goalSektCounter = document.querySelector('#goalSektCounter');

        if (allGoalsCounter && gamesPlayedCounter && goalSektCounter) {
            allGoalsCounter.textContent = counters.allGoals !== 0 ? counters.allGoals : 0;
            gamesPlayedCounter.textContent = counters.gamesPlayed !== 0 ? counters.gamesPlayed : 0;
            goalSektCounter.textContent = counters.goalSektCounter !== 0 ? counters.goalSektCounter : 0;
        }
    }


    async function SetGameToActive() {      //Set game to active and update the live page
        try {
            const gameId = '{{ game._id }}';


            await fetch(`/game/start/${gameId}`, {
                method: 'POST',
            });

            const response = await fetch(`/game/${gameId}/updateLivePage`, {
                method: 'POST',
            });
            
            //socket.emit('resetGame', durationInSeconds); // Reset the timer to the game duration // Timer reset is done from server side now

            const updateButton = document.getElementById('updateLivePageButton');
            updateButton.disabled = true;

            // TODO: this is just a temporary solution - should be replaced with re-rendering of specific parts instead of reloading the page
            location.reload();

            // show  bootstrap alert for one second to indicate success
            //const alert = document.querySelector('.alert-success');
            //alert.classList.remove('d-none');
            //setTimeout(() => {
            //    alert.classList.add('d-none');
            //}, 2000);

        } catch (err) {
            console.error('Error updating data on Live page: ', err);
        }
    }

    function disableActiveGameButton(status) {
        const updateButton = document.getElementById('updateLivePageButton');
        updateButton.disabled = status === 'active';
    }
    disableActiveGameButton('{{ game.status }}');


    const socket = io('http://localhost:2053');
    //const socket = io('https://budescharfeseck.de:2053');

       socket.on('connect', () => {
    console.log('Socket connected');
    });

   socket.emit('getData'); //Call for game data when page loads

    socket.on('timerUpdate', (timerValue, isPaused, timerStatus) => {
        const minutes = Math.floor(timerValue / 60);
        const seconds = timerValue % 60;
        const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        document.getElementById('countdownTimer').innerText = formattedTime;
        document.getElementById('timerStatus').innerText = `Status: ${timerStatus}`;
    });

    document.getElementById('resetButton').addEventListener('click', () => {
        socket.emit('resetGame', durationInSeconds);
    });

    document.getElementById('startButton').addEventListener('click', async () => {

        socket.emit('playPauseGame');

    });

    const gameOppNames = ['{{ game.opponents.[0] }}', '{{ game.opponents.[1] }}'];

    socket.on('Sekt', (teamNum) => {

        console.log('Sekt for Team: ' + teamNum);
        console.log('Sekt for Team: ' + gameOppNames[teamNum-1]);    // teamNum is 1 or 2, but array index is 0 or 1

        // show  bootstrap info-alert for 60 seconds to indicate Sekt
        const alert = document.querySelector('.alert-info');
        alert.textContent = 'Sekt fÃ¼r ' + gameOppNames[teamNum-1]; // Set the Sekt-alert message
        alert.classList.remove('d-none');
        setTimeout(() => {
            alert.classList.add('d-none');
        }, 60000); // 60 seconds
        
    });
</script>